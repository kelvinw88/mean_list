{
  "name": "angular-resource",
  "description": "AngularJS $resource bindings for express.",
  "version": "0.1.1",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/roylines/node-angular-resource/raw/master/LICENSE"
    }
  ],
  "author": {
    "name": "Roy Lines",
    "url": "http://roylines.co.uk"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/roylines/node-angular-resource.git"
  },
  "keywords": [
    "angularjs",
    "express",
    "$resource"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "sinon": "*"
  },
  "main": "./lib/angular-resource",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "mocha test/*-test.js"
  },
  "readme": "# node-angular-resource [![Build Status](https://travis-ci.org/roylines/node-angular-resource.png?branch=master)](https://travis-ci.org/roylines/node-angular-resource)\n[AngularJS](http://angularjs.org/) [$resource](http://docs.angularjs.org/api/ngResource.$resource) bindings for express in node\n\n## Description\nangular-resource is a node module that simplifies the use of [angularjs](http://angularjs.org/)\n[$resource](http://docs.angularjs.org/api/ngResource.$resource) factory by creating the default\nset of resource actions for get, save, query, remove and delete.\n\nIt is best described by example. Suppose you have an angularjs service defined as follows:\n\n```javascript\nvar myServices = angular.module('myServices', ['ngResource'])\n\nmyServices.factory('Task', function($resource) {\n\treturn $resource('api/tasks/:id', { id: \"@_id\" });\n});\n```\n\nThe myServices Task will, by default, now support get, save, query, remove and delete. The\nrequired endpoints can simply be routed via express by using the angular-resource module:\n\nFirst create a task.js with the following details:\n```javascript\nvar task = { };\n\ntask.get = function(req, res) {\n\tres.json({});\n};\n\ntask.save = function(req, res) {\n\tres.send(200);\n};\n\ntask.query = function(req, res) {\n\tres.json([]);\n};\n\ntask.remove = function(req, res) {\n\tres.send(200);\n};\n\nmodule.exports = task;\n```\n\nand then use angular-resource to bind it into express.\n\n```javascript\nvar angularResource = require('angular-resource'),\n\t\texpress = require('express');\n\nvar app = express();\n\nangularResource(app, '/api/1', 'task');\n\napp.listen(3000);\n```\n\nThis will bind the required endpoints through to task.js. Note that both 'delete' and 'remove' are\nrouted to the 'remove' method.\n\nIf you wish to use middleware, then define the binding as follows:\n\n```javascript\nvar middleware = function(req, res, next) {\n\treturn next(req, res);\n};\n\nangularResource(app, '/api/1', 'task', middleware);\n```\n\n\nIf you don't want to support all of the default $resource actions, then just omit them\nfrom the object. In the example above,  if you don't want to support remove then just define task.js as follows:\n\n```javascript\nvar task = { };\n\ntask.get = function(req, res) {\n\tres.json({});\n};\n\ntask.save = function(req, res) {\n\tres.send(200);\n};\n\ntask.query = function(req, res) {\n\tres.json([]);\n};\n\nmodule.exports = task;\n```\n\nYou can now create includes for all of the $resource objects your angularjs services require and\nbind them in the same way.\n",
  "readmeFilename": "README.md",
  "_id": "angular-resource@0.1.1",
  "dist": {
    "shasum": "ff279ab97c9c087d49144c0ae1fd69486df43759",
    "tarball": "http://registry.npmjs.org/angular-resource/-/angular-resource-0.1.1.tgz"
  },
  "_from": "angular-resource@*",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "roylines",
    "email": "roy@roylines.co.uk"
  },
  "maintainers": [
    {
      "name": "roylines",
      "email": "roy@roylines.co.uk"
    }
  ],
  "directories": {},
  "_shasum": "ff279ab97c9c087d49144c0ae1fd69486df43759",
  "_resolved": "https://registry.npmjs.org/angular-resource/-/angular-resource-0.1.1.tgz"
}
